ext.deps = [:]

def versions = [:]

versions.kotlin = kotlin_version
versions.appcompat = '1.1.0'
versions.material = '1.1.0'
versions.fragment = '1.2.3'
versions.constraintlayout = '1.1.3'
versions.ktx = '1.2.0'
versions.navigation = '2.2.1'
versions.rxjava = '2.2.9'
versions.rxandroid = '2.1.0'
versions.dagger = '2.27'
versions.retrofit = '2.5.0'
versions.moshi = '1.9.2'
versions.stetho = "1.5.1"
versions.timber = "4.7.1"
versions.logging_interceptor = "4.4.0"

deps.appcompat = "androidx.appcompat:appcompat:$versions.appcompat"
deps.material = "com.google.android.material:material:$versions.material"
deps.constraintlayout = "androidx.constraintlayout:constraintlayout:$versions.constraintlayout"
deps.ktx = "androidx.core:core-ktx:$versions.ktx"
deps.rxjava = "io.reactivex.rxjava2:rxjava:$versions.rxjava"
deps.rxandroid = "io.reactivex.rxjava2:rxandroid:$versions.rxandroid"
deps.stetho = "com.facebook.stetho:stetho:$versions.stetho"
deps.timber = "com.jakewharton.timber:timber:$versions.timber"
deps.logging_interceptor = "com.squareup.okhttp3:logging-interceptor:$versions.logging_interceptor"

def kotlin = [:]
kotlin.stdlib = "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$versions.kotlin"
deps.kotlin = kotlin

def fragment = [:]
fragment.fragment = "androidx.fragment:fragment:$versions.fragment"
fragment.ktx = "androidx.fragment:fragment-ktx:$versions.fragment"
deps.fragment = fragment

def navigation = [:]
navigation.fragment = "androidx.navigation:navigation-fragment-ktx:$versions.navigation"
navigation.ui = "androidx.navigation:navigation-ui-ktx:$versions.navigation"
deps.navigation = navigation

def dagger = [:]
dagger.dagger = "com.google.dagger:dagger:$versions.dagger"
dagger.processor = "com.google.dagger:dagger-compiler:$versions.dagger"
deps.dagger = dagger

def retrofit = [:]
retrofit.retrofit = "com.squareup.retrofit2:retrofit:$versions.retrofit"
retrofit.moshi_converter = "com.squareup.retrofit2:converter-moshi:$versions.retrofit"
retrofit.rxjava_adapter = "com.squareup.retrofit2:adapter-rxjava2:$versions.retrofit"
deps.retrofit = retrofit

def moshi = [:]
moshi.moshi = "com.squareup.moshi:moshi:$versions.moshi"
moshi.codegen = "com.squareup.moshi:moshi-kotlin-codegen:$versions.moshi"
deps.moshi = moshi

def espresso_core_version = '3.2.0'
def androidx_junit_version = '1.1.1'
def junit_version = '4.12'
def assertJ_version = '3.15.0'
def spek_version = '2.0.10'
def mockwebserver_version = '4.4.0'
def mockito_kotlin_version = '2.2.0'
def mockito_inline_version = '2.28.2'

ext {
    testDependencies = [
            test_core = project((':test_core')),
            junit = "junit:junit:$junit_version",
            assertJ = "org.assertj:assertj-core:$assertJ_version",
            spek = "org.spekframework.spek2:spek-dsl-jvm:$spek_version",
            spek_runner = "org.spekframework.spek2:spek-runner-junit5:$spek_version",
            kotlin_reflect = "org.jetbrains.kotlin:kotlin-reflect:$versions.kotlin",
            mockwebserver = "com.squareup.okhttp3:mockwebserver:$mockwebserver_version",
            mockito_kotlin = "com.nhaarman.mockitokotlin2:mockito-kotlin:$mockito_kotlin_version",
            mockito_inline = "org.mockito:mockito-inline:$mockito_inline_version",
    ]

    androidTestDependencies = [
            espresso_core = "com.android.support.test.espresso:espresso-core:$espresso_core_version",
            androidx_junit = "androidx.test.ext:junit:$androidx_junit_version"
    ]
}
